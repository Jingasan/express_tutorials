version: "3.9"
services:
  api-server:
    container_name: $NODE_API_CONTAINER_NAME
    image: $NODE_API_CONTAINER_IMAGE
    build:
      context: ./api-server
      dockerfile: Dockerfile
      args:
        - HTTP_PROXY=$HTTP_PROXY
        - http_proxy=$http_proxy
        - HTTPS_PROXY=$HTTPS_PROXY
        - https_proxy=$https_proxy
    ports:
      - $NODE_API_SERVER_PORT:$NODE_API_SERVER_PORT
    depends_on:
      - redis-server
    env_file:
      - .env
    deploy:
      mode: replicated
      replicas: 1 # 起動コンテナ数
      placement:
        max_replicas_per_node: 1
      resources:
        limits: # リソース量上限
          cpus: $NODE_API_CONTAINER_MAX_CPU # CPUコア数上限
          memory: $NODE_API_CONTAINER_MAX_MEMORY # メモリ量上限
        reservations: # 必須リソース量
          cpus: $NODE_API_CONTAINER_MIN_CPU # 必須CPUコア数
          memory: $NODE_API_CONTAINER_MIN_MEMORY # 必須メモリ量
    restart: always # 再起動条件：常に
    networks:
      - backend
  redis-server:
    container_name: $REDIS_CONTAINER_NAME
    image: $REDIS_CONTAINER_IMAGE
    build:
      context: ./redis-server
      dockerfile: Dockerfile
      args:
        - HTTP_PROXY=$HTTP_PROXY
        - http_proxy=$http_proxy
        - HTTPS_PROXY=$HTTPS_PROXY
        - https_proxy=$https_proxy
    platform: linux/amd64
    ports:
      - $REDIS_SERVER_PORT:$REDIS_SERVER_PORT
    volumes: # ボリュームのアタッチ
      - ./redis-server/data:/data # Redisの永続化データ
    command: redis-server --port $REDIS_SERVER_PORT --requirepass $REDIS_SERVER_PASSWORD --maxmemory $REDIS_CONTAINER_MAX_MEMORY --appendonly yes
    env_file:
      - .env
    deploy:
      mode: replicated
      replicas: 1 # 起動コンテナ数
      placement:
        max_replicas_per_node: 1
      resources:
        limits: # リソース量上限
          cpus: $REDIS_CONTAINER_MAX_CPU # CPUコア数上限
          memory: $REDIS_CONTAINER_MAX_MEMORY # メモリ量上限
        reservations: # 必須リソース量
          cpus: $REDIS_CONTAINER_MIN_CPU # 必須CPUコア数
          memory: $REDIS_CONTAINER_MIN_MEMORY # 必須メモリ量
    restart: always # 再起動条件：常に
    networks:
      - backend
# ネットワーク設定
networks:
  backend:
    driver: bridge # ネットワークタイプ
    name: $NETWORK_NAME # Dockerネットワーク名
